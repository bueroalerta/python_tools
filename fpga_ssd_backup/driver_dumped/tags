!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ADDR_MASK	ssd_drv.h	165;"	d
ADDR_TABLE_PAGES	ssd_drv.h	205;"	d
ALLBLOCKS	ssd_drv.h	/^    ALLBLOCKS$/;"	e	enum:block_type
ATOMIC_INIT	ssd_drv.h	283;"	d
BAD_BLOCK	ssd_type.h	145;"	d
BLOCKSIZE	ssd_drv.h	/^int BLOCKSIZE[ALLBLOCKS] = {$/;"	v
BLOCKS_PER_PLANE	ssd_drv.h	158;"	d
BT_DATA_BLOCK_NUM	ssd_drv.h	216;"	d
BT_DATA_SIZE	ssd_drv.h	218;"	d
BT_INDEX_BLOCK_NUM	ssd_drv.h	215;"	d
BT_INDEX_SIZE	ssd_drv.h	217;"	d
CC	Makefile	/^CC:=gcc$/;"	m
CHANNEL_STATUS	ssd_drv.h	229;"	d
CURRENT_AREA_THROTTLE	ssd_drv.h	381;"	d
DBLOCK	ssd_drv.h	/^    DBLOCK,	\/*data block*\/$/;"	e	enum:block_type
EIDUNVAL	ssd_type.h	/^    EIDUNVAL = 35,$/;"	e	enum:SSD_ERROR_TYPE
EMETAUNVAL	ssd_type.h	/^    EMETAUNVAL = 34,$/;"	e	enum:SSD_ERROR_TYPE
ENOMETA	ssd_type.h	/^    ENOMETA = 32,$/;"	e	enum:SSD_ERROR_TYPE
EREADFLUSH	ssd_type.h	/^    EREADFLUSH = 33,$/;"	e	enum:SSD_ERROR_TYPE
ETABLEDATA	ssd_type.h	/^    ETABLEDATA = 36,$/;"	e	enum:SSD_ERROR_TYPE
FLUSH_CLOSE_TYPE	ssd_drv.h	/^    FLUSH_CLOSE_TYPE = 1,$/;"	e	enum:FLUSH_TYPE
FLUSH_MAGIC_CLOSE	ssd_drv.h	211;"	d
FLUSH_MAGIC_NORMAL	ssd_drv.h	210;"	d
FLUSH_NORMAL_TYPE	ssd_drv.h	/^    FLUSH_NORMAL_TYPE = 0,$/;"	e	enum:FLUSH_TYPE
FLUSH_TYPE	ssd_drv.h	/^enum FLUSH_TYPE {$/;"	g
FREE_AREA_RECLAIM_THROTTLE	ssd_drv.h	382;"	d
IBLOCK	ssd_drv.h	/^    IBLOCK = 0, \/*index block*\/$/;"	e	enum:block_type
INCLUDE	Makefile	/^INCLUDE :=-I.$/;"	m
INVALID_VALUE	ssd_type.h	144;"	d
IOCTL_CLOSE	ssd_type.h	192;"	d
IOCTL_DELETE	ssd_type.h	195;"	d
IOCTL_FLUSH	ssd_type.h	193;"	d
IOCTL_IOC_MAGIC	ssd_type.h	190;"	d
IOCTL_MARK_BAD_BLOCK	ssd_type.h	208;"	d
IOCTL_MARK_ERASE_COUNT	ssd_type.h	209;"	d
IOCTL_OPEN	ssd_type.h	191;"	d
IOCTL_READ	ssd_type.h	197;"	d
IOCTL_READ_FLUSH	ssd_type.h	210;"	d
IOCTL_READ_ID_TABLE	ssd_type.h	200;"	d
IOCTL_READ_TABLE	ssd_type.h	198;"	d
IOCTL_REG_READ	ssd_type.h	205;"	d
IOCTL_REG_WRITE	ssd_type.h	206;"	d
IOCTL_SYS_INIT	ssd_type.h	203;"	d
IOCTL_UNITTEST	ssd_type.h	202;"	d
IOCTL_WRITE	ssd_type.h	196;"	d
IOCTL_WRITE_RETRY	ssd_type.h	199;"	d
KERNELDIR	Makefile	/^KERNELDIR:=\/home\/ssd\/linux2-6-32_1-9-0-0_PD_BL_ssd$/;"	m
LOG_PATH	ssd_drv.c	/^static char* LOG_PATH = "\/home\/disk1\/ssd_driver.log";$/;"	v	file:
M	Makefile	/^	$(MAKE) -C $(KERNELDIR) $(INCLUDE) M=$(PWD) -Wall -Werror  modules$/;"	m
MAX_DEVNAME	ssd_drv.h	81;"	d
META_BITMAP_SIZE	ssd_drv.h	197;"	d
PARAM_BLOCK	ssd_type.h	143;"	d
PARAM_ID	ssd_type.h	142;"	d
PHY_PLANE01_BLOCK_VALID_START	ssd_drv.h	150;"	d
PHY_PLANE23_BLOCK_VALID_START	ssd_drv.h	161;"	d
PLANE01_MAX_TABLE_INDEX	ssd_drv.h	153;"	d
PLANE0_TABLE_START	ssd_drv.h	168;"	d
PLANE1_TABLE_START	ssd_drv.h	169;"	d
PLANE2_TABLE_START	ssd_drv.h	170;"	d
PLANE3_TABLE_START	ssd_drv.h	171;"	d
PLANE_RESERVE_BLOCKS	ssd_drv.h	156;"	d
PLANE_TABLE_RESERVE_COUNT	ssd_drv.h	151;"	d
PLANE_VALID_BLOCKS	ssd_drv.h	159;"	d
PRE_ALLOC_BLOCKS	ssd_drv.h	387;"	d
PRE_ALLOC_START	ssd_drv.h	388;"	d
PWD	Makefile	/^PWD := $(shell pwd)$/;"	m
RESERVE_BLOCKS_EACH_TABLE	ssd_drv.h	199;"	d
RESERVE_BLOCKS_META	ssd_drv.h	193;"	d
RESERVE_BLOCKS_META_IN_PLANE	ssd_drv.h	213;"	d
RESERVE_BLOCKS_PER_CHANNEL	ssd_drv.h	191;"	d
RESERVE_BLOCKS_TABLE	ssd_drv.h	192;"	d
RESERVE_BLOCKS_TOTAL	ssd_drv.h	194;"	d
SEND_DATA_FLAG_MASK	ssd_drv.h	231;"	d
SEND_DATA_LEN_MASK	ssd_drv.h	233;"	d
SEND_DATA_START_MASK	ssd_drv.h	232;"	d
SSD_BAD_BLOCK	ssd_drv.h	116;"	d
SSD_BAR	ssd_drv.h	66;"	d
SSD_BLOCK_SHIFT	ssd_drv.h	208;"	d
SSD_BLOCK_SHIFT	ssd_type.h	21;"	d
SSD_BLOCK_SIZE	ssd_type.h	19;"	d
SSD_BUFFER_SIZE	ssd_drv.h	78;"	d
SSD_CHANNELS_IN_S6	ssd_type.h	41;"	d
SSD_CHANNEL_STATUS	ssd_drv.h	114;"	d
SSD_CHANNEL_TIMEOUT	ssd_drv.h	87;"	d
SSD_CLOSED	ssd_drv.h	220;"	d
SSD_CONFIG_BASE	ssd_drv.h	101;"	d
SSD_DEEPOCEAN_DEVICE_ID	ssd_drv.h	75;"	d
SSD_DEVICE_NAME	ssd_drv.h	68;"	d
SSD_DRIVER_NAME	ssd_drv.h	69;"	d
SSD_DRIVER_VERSION	ssd_drv.h	58;"	d
SSD_DRV_INCLUDED	ssd_drv.h	13;"	d
SSD_ERROR	ssd_type.h	/^    SSD_ERROR  = (-1),$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERROR_TYPE	ssd_type.h	/^ enum SSD_ERROR_TYPE{$/;"	g
SSD_ERR_ALLOC_BLOCK	ssd_type.h	/^    SSD_ERR_ALLOC_BLOCK = 26,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_BAD_BLOCK	ssd_type.h	/^    SSD_ERR_BAD_BLOCK = 19,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_CHANNEL	ssd_type.h	/^    SSD_ERR_CHANNEL = 16, \/* the channel status is disable *\/$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_COPY_FROM_USER	ssd_type.h	/^    SSD_ERR_COPY_FROM_USER = 14,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_COPY_TO_USER	ssd_type.h	/^    SSD_ERR_COPY_TO_USER = 15,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_DEL_TIMER	ssd_type.h	/^    SSD_ERR_DEL_TIMER = 13,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_DMA_MAP	ssd_type.h	/^    SSD_ERR_DMA_MAP = 12,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_INVALID_PARAM	ssd_type.h	/^    SSD_ERR_INVALID_PARAM = 37,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_LEN_BLOCK_ALIGN	ssd_type.h	/^    SSD_ERR_LEN_BLOCK_ALIGN = 4,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_LEN_PAGE_ALIGN	ssd_type.h	/^    SSD_ERR_LEN_PAGE_ALIGN = 2,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_META_BLOCK_ALIGN	ssd_type.h	/^    SSD_ERR_META_BLOCK_ALIGN = 31,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NOMEM	ssd_type.h	/^    SSD_ERR_NOMEM = 8,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NOT_BAD_BLOCK	ssd_type.h	/^    SSD_ERR_NOT_BAD_BLOCK = 38,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NOT_CLOSED	ssd_type.h	/^    SSD_ERR_NOT_CLOSED = 25,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NOT_OPENED	ssd_type.h	/^    SSD_ERR_NOT_OPENED = 24,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NOT_SSD	ssd_type.h	/^    SSD_ERR_NOT_SSD = 11,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NO_DEV	ssd_type.h	/^    SSD_ERR_NO_DEV = 10,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NO_INVALID_BLOCKS	ssd_type.h	/^    SSD_ERR_NO_INVALID_BLOCKS = 20,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NO_VALID_FD	ssd_type.h	/^    SSD_ERR_NO_VALID_FD = 23,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NO_VALID_RESERVE	ssd_type.h	/^    SSD_ERR_NO_VALID_RESERVE = 30,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_NULL	ssd_type.h	/^    SSD_ERR_NULL = 7,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_OEPN_DEV_FAILED	ssd_type.h	/^    SSD_ERR_OEPN_DEV_FAILED = 22,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_PARAM_OVERFLOW	ssd_type.h	/^    SSD_ERR_PARAM_OVERFLOW = 5,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_PARAM_WRLEN	ssd_type.h	/^    SSD_ERR_PARAM_WRLEN = 6,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_SSD	ssd_type.h	/^    SSD_ERR_SSD = 17, \/* the ssd status is disable *\/$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_START_BLOCK_ALIGN	ssd_type.h	/^    SSD_ERR_START_BLOCK_ALIGN = 3,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_START_PAGE_ALIGN	ssd_type.h	/^    SSD_ERR_START_PAGE_ALIGN = 1,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_TABLE_TYPE	ssd_type.h	/^    SSD_ERR_TABLE_TYPE = 21,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_TIMEOUT	ssd_type.h	/^    SSD_ERR_TIMEOUT = 9,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ERR_WAIT	ssd_type.h	/^    SSD_ERR_WAIT = 18, \/* the operation is wait for complete *\/$/;"	e	enum:SSD_ERROR_TYPE
SSD_FALG_INIT	ssd_drv.h	132;"	d
SSD_FLAG_BACKUP	ssd_drv.h	131;"	d
SSD_FLAG_ERASE	ssd_drv.h	122;"	d
SSD_FLAG_ERASETABLES	ssd_drv.h	125;"	d
SSD_FLAG_READ	ssd_drv.h	120;"	d
SSD_FLAG_READOOB	ssd_drv.h	133;"	d
SSD_FLAG_READRAM	ssd_drv.h	130;"	d
SSD_FLAG_READTABLES_FROM_FLASH	ssd_drv.h	123;"	d
SSD_FLAG_READ_ADDR_TABLE	ssd_drv.h	127;"	d
SSD_FLAG_READ_ERASE_TABLE	ssd_drv.h	129;"	d
SSD_FLAG_WRITE	ssd_drv.h	121;"	d
SSD_FLAG_WRITETABLE_TO_FLASH	ssd_drv.h	124;"	d
SSD_FLAG_WRITE_ADDR_TABLE	ssd_drv.h	126;"	d
SSD_FLAG_WRITE_ERASE_TABLE	ssd_drv.h	128;"	d
SSD_HASH_SIZE	ssd_drv.h	282;"	d
SSD_ID_ALREADY_EXIST	ssd_type.h	/^    SSD_ID_ALREADY_EXIST = 28,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ID_MAP_ERROR	ssd_type.h	/^    SSD_ID_MAP_ERROR = 29,$/;"	e	enum:SSD_ERROR_TYPE
SSD_ID_NO_EXIST	ssd_type.h	/^    SSD_ID_NO_EXIST = 27,$/;"	e	enum:SSD_ERROR_TYPE
SSD_INIT_TIMEOUT	ssd_drv.h	88;"	d
SSD_IRQ_PENDING	ssd_drv.h	106;"	d
SSD_IRQ_S6	ssd_drv.h	107;"	d
SSD_LOG_EMG	ssd_drv.c	/^    SSD_LOG_EMG     = 0,               \/* emergency conditions *\/$/;"	e	file:
SSD_LOG_ERR	ssd_drv.c	/^    SSD_LOG_ERR     = 1,               \/* error conditions *\/$/;"	e	file:
SSD_LOG_INFO	ssd_drv.c	/^    SSD_LOG_INFO    = 3,               \/* informational *\/$/;"	e	file:
SSD_LOG_MAX_LINE	ssd_drv.c	222;"	d	file:
SSD_LOG_TRACE	ssd_drv.c	/^    SSD_LOG_TRACE   = 4,               \/* debug-level messages *\/$/;"	e	file:
SSD_LOG_WARNING	ssd_drv.c	/^    SSD_LOG_WARNING = 2,               \/* action must be taken immediately *\/$/;"	e	file:
SSD_MAX_BLOCK	ssd_type.h	36;"	d
SSD_MAX_CHANNEL	ssd_type.h	43;"	d
SSD_MAX_CHANNEL_EACH_TABLE	ssd_drv.h	180;"	d
SSD_MAX_FLUSH_BLOCK	ssd_drv.h	183;"	d
SSD_MAX_FLUSH_META_CHANNEL	ssd_drv.h	178;"	d
SSD_MAX_FLUSH_META_RETRY	ssd_drv.h	187;"	d
SSD_MAX_FLUSH_SIZE	ssd_drv.h	184;"	d
SSD_MAX_FLUSH_TABLE_CHANNEL	ssd_drv.h	179;"	d
SSD_MAX_FLUSH_TABLE_RETRY	ssd_drv.h	186;"	d
SSD_MAX_ID_NUM	ssd_drv.h	202;"	d
SSD_MAX_ID_NUM_PER_CHANNEL	ssd_drv.h	203;"	d
SSD_MAX_PAGE	ssd_type.h	35;"	d
SSD_MAX_PHYBLOCKS_PER_CHANNEL	ssd_drv.h	145;"	d
SSD_MAX_PLANES	ssd_drv.h	173;"	d
SSD_MAX_TABELS	ssd_drv.h	140;"	d
SSD_MAX_TRY_COUNT	ssd_drv.h	142;"	d
SSD_MAX_VIRBLOCKS	ssd_drv.h	201;"	d
SSD_MAX_VIRBLOCKS_PER_CHANNEL	ssd_drv.h	148;"	d
SSD_MAX_WRITE_RETRY	ssd_drv.h	223;"	d
SSD_MINORS	ssd_drv.h	63;"	d
SSD_MIN_META_DUPLICATE	ssd_drv.h	189;"	d
SSD_MODULE_VERSION	ssd_drv.c	/^MODULE_VERSION(SSD_MODULE_VERSION);$/;"	v
SSD_MODULE_VERSION	ssd_drv.h	59;"	d
SSD_OK	ssd_type.h	/^    SSD_OK = 0,$/;"	e	enum:SSD_ERROR_TYPE
SSD_OPENED	ssd_drv.h	221;"	d
SSD_PAGES_PER_BLOCK	ssd_type.h	18;"	d
SSD_PAGES_PER_TABLE	ssd_drv.h	137;"	d
SSD_PAGE_SHIFT	ssd_type.h	20;"	d
SSD_PAGE_SIZE	ssd_type.h	17;"	d
SSD_RAM_SIZE	ssd_drv.h	115;"	d
SSD_S6_BASE	ssd_drv.h	100;"	d
SSD_S6_CHANNEL_LEN	ssd_drv.h	103;"	d
SSD_S6_IRQ0	ssd_drv.h	108;"	d
SSD_S6_IRQ1	ssd_drv.h	109;"	d
SSD_S6_IRQ2	ssd_drv.h	110;"	d
SSD_S6_IRQ3	ssd_drv.h	111;"	d
SSD_S6_LEN	ssd_drv.h	102;"	d
SSD_S6_NUMS	ssd_type.h	39;"	d
SSD_STATUS	ssd_drv.h	113;"	d
SSD_TABLE_SIZE	ssd_drv.h	206;"	d
SSD_TABLE_TYPE_BITS	ssd_type.h	24;"	d
SSD_TABLE_TYPE_MASK	ssd_type.h	25;"	d
SSD_TABLE_TYPE_NUM	ssd_drv.h	207;"	d
SSD_TYPE_INCLUDED	ssd_type.h	12;"	d
STATUS_DISABLE	ssd_drv.h	85;"	d
STATUS_ENABLE	ssd_drv.h	84;"	d
TABLE_ADDR_TYPE	ssd_type.h	/^    TABLE_ADDR_TYPE  = 1,$/;"	e	enum:TABLE_TYPE
TABLE_BITMAP_SIZE	ssd_drv.h	196;"	d
TABLE_DUPLICATE	ssd_drv.h	176;"	d
TABLE_ERASE_TYPE	ssd_type.h	/^    TABLE_ERASE_TYPE = 0,$/;"	e	enum:TABLE_TYPE
TABLE_TYPE	ssd_type.h	/^enum TABLE_TYPE {$/;"	g
TABLE_TYPE_COUNT	ssd_type.h	/^    TABLE_TYPE_COUNT = 2,$/;"	e	enum:TABLE_TYPE
TEST_OFF	ssd_drv.h	49;"	d
TEST_ON	ssd_drv.h	50;"	d
VERDOR_ID_BAIDU	ssd_drv.h	72;"	d
__64BIT__	ssd_type.h	59;"	d
addr	ssd_drv.h	/^    ssd_u64 addr;$/;"	m	struct:ssd_regrd_param
addr	ssd_drv.h	/^    ssd_u64 addr;$/;"	m	struct:ssd_regwr_param
addr	ssd_type.h	/^    uint64_t addr;$/;"	m	struct:reg_write_param
addr_entry	ssd_drv.h	/^struct addr_entry$/;"	s
area	ssd_drv.h	/^    struct free_area_list area[SSD_MAX_CHANNEL]; \/*for logic block allocation*\/$/;"	m	struct:ssd_device
bad_flag	ssd_drv.h	/^    ssd_u16  bad_flag    : 1;$/;"	m	struct:erase_entry
bitmap_lock	ssd_drv.h	/^    spinlock_t bitmap_lock;$/;"	m	struct:free_area_bitmap
bitmap_merge	ssd_drv.c	/^static int bitmap_merge(struct free_area_bitmap *from, struct free_area_bitmap *to)$/;"	f	file:
bitmap_split	ssd_drv.c	/^static int bitmap_split(struct free_area_bitmap *from, struct free_area_bitmap *to)$/;"	f	file:
block	ssd_drv.h	/^    ssd_u16 block;$/;"	m	struct:erase_entry_map
block	ssd_drv.h	/^    ssd_u32 block    :13;   \/* block = 0...19   *\/$/;"	m	struct:flush_id_info
block	ssd_drv.h	/^    ssd_u32 block    :13;$/;"	m	struct:id_info
block	ssd_drv.h	/^    ssd_u32 block    :13;$/;"	m	struct:ssd_hash_node
block	ssd_type.h	/^            ssd_u16 block;$/;"	m	struct:ssd_mark_bad_param::<anonymous>::<anonymous>
block	ssd_type.h	/^            ssd_u16 block;$/;"	m	struct:ssd_meta_version::<anonymous>::<anonymous>
block_num	ssd_drv.h	/^    ssd_u16 block_num;$/;"	m	struct:ssd_metadata
block_nums	ssd_type.h	/^    ssd_u32  block_nums;  \/* the number of blocks per channel *\/$/;"	m	struct:ssd_info
block_offset	ssd_type.h	/^    ssd_u8  block_offset;   \/\/ 0 to 4 $/;"	m	struct:ssd_write_retry_param
block_page	ssd_type.h	/^        }block_page;$/;"	m	union:ssd_meta_version::<anonymous>
block_pos	ssd_drv.h	/^    ssd_u16 block_pos;       \/* persition = 0, 4, 8, 12, 16; 20, 24, 28, 32, 36 *\/$/;"	m	struct:meta_position
block_type	ssd_drv.h	/^enum block_type{$/;"	g
blocks_per_plane	ssd_type.h	/^    ssd_u32  blocks_per_plane;   $/;"	m	struct:ssd_info
buf	ssd_type.h	/^    ssd_u8*  buf;         $/;"	m	struct:ssd_read_param
buf	ssd_type.h	/^    ssd_u8*  buf;         $/;"	m	struct:ssd_write_param
buf	ssd_type.h	/^    ssd_u8*  buf;         $/;"	m	struct:ssd_write_retry_param
buf	ssd_type.h	/^    ssd_u8* buf;         \/* the user buffer address *\/$/;"	m	struct:ioctl_channel_op_user
buff	ssd_type.h	/^    ssd_u8 *buff;$/;"	m	struct:ssd_meta_version
calc_phyblock	ssd_drv.c	/^static inline ssd_s32 calc_phyblock(ssd_u16 block_pos)$/;"	f	file:
ch_hash	ssd_drv.h	/^    struct channel_hash_list ch_hash[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
channel	ssd_drv.h	/^    ssd_u32 channel  : 6;   \/* channel = 0...43 *\/$/;"	m	struct:flush_id_info
channel	ssd_drv.h	/^    ssd_u32 channel  : 6;$/;"	m	struct:id_info
channel	ssd_drv.h	/^    ssd_u32 channel  : 6;$/;"	m	struct:ssd_hash_node
channel	ssd_drv.h	/^    ssd_u8 channel;         $/;"	m	struct:channel_op_control
channel	ssd_type.h	/^	ssd_u8 channel;$/;"	m	struct:ssd_mark_erase_count_param
channel	ssd_type.h	/^            ssd_u16 channel;$/;"	m	struct:ssd_mark_bad_param::<anonymous>::<anonymous>
channel	ssd_type.h	/^    ssd_u8 channel;    $/;"	m	struct:ioctl_channel_op_user
channel	ssd_type.h	/^    ssd_u8 channel;$/;"	m	struct:ssd_table_param
channel_ctl	ssd_drv.h	/^    channel_op_control_t channel_ctl[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
channel_hash_list	ssd_drv.h	/^struct channel_hash_list$/;"	s
channel_num	ssd_drv.h	/^    ssd_u8 channel_num;   $/;"	m	struct:ssd_device
channel_op	ssd_drv.c	/^static int channel_op(struct ssd_device *sdev, ssd_u8 channel, ssd_u64 cmd)$/;"	f	file:
channel_op_control	ssd_drv.h	/^typedef struct channel_op_control {$/;"	s
channel_op_control_t	ssd_drv.h	/^}channel_op_control_t;$/;"	t
check_id_info	ssd_drv.c	/^static int check_id_info(id_info_t *id_info)$/;"	f	file:
cmd_value	ssd_drv.h	/^static inline ssd_u64 cmd_value(ssd_u32 start, ssd_u32 len, ssd_u8 flag)$/;"	f
conf_channel_addr	ssd_drv.h	/^    void __iomem* conf_channel_addr[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
conf_channel_cmd	ssd_drv.h	/^    void __iomem* conf_channel_cmd[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
conf_regs	ssd_drv.h	/^    void __iomem *conf_regs;      \/* Virtual address of bar0 ram space *\/$/;"	m	struct:ssd_device
copy_hash_node_to_flush_id_info	ssd_drv.c	/^static inline void copy_hash_node_to_flush_id_info(struct ssd_hash_node *node, struct flush_id_info *sp)$/;"	f	file:
copy_id_hash	ssd_drv.c	/^static ssd_u32 copy_id_hash(struct ssd_device *sdev, struct flush_id_info *buffer)$/;"	f	file:
copy_ram_table	ssd_drv.c	/^static int copy_ram_table(struct ssd_device *sdev, ssd_u8 channel, char *buffer)$/;"	f	file:
count	ssd_drv.h	/^    atomic_t count; $/;"	m	struct:ssd_hash_head
count	ssd_type.h	/^	ssd_u16 count;$/;"	m	struct:ssd_mark_erase_count_param
crc32	ssd_drv.h	/^    ssd_u32 crc32;$/;"	m	struct:flush_id_info
create_addrmap_table	ssd_drv.c	/^static void create_addrmap_table(struct ssd_device *const sdev, ssd_u8 channel)$/;"	f	file:
create_erase_table	ssd_drv.c	/^static void create_erase_table(struct ssd_device *sdev, ssd_u8 channel)$/;"	f	file:
create_ssd_proc	ssd_drv.c	/^static int create_ssd_proc(void)$/;"	f	file:
current_free_area	ssd_drv.h	/^    ssd_u16 current_free_area[SSD_MAX_CHANNEL]; \/*consecutive blocks on SSD, other than blocks in free area*\/$/;"	m	struct:ssd_device
del_id_info	ssd_drv.c	/^static int del_id_info(struct ssd_device *sdev, struct ssd_blockid *id, id_info_t *info)$/;"	f	file:
del_ssd_proc	ssd_drv.c	/^static int del_ssd_proc(void)$/;"	f	file:
delete_count	ssd_drv.c	/^static unsigned int delete_count[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
delete_count_buf	ssd_drv.c	/^static unsigned int delete_count_buf[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
delete_logic_block	ssd_drv.c	/^static void delete_logic_block(struct ssd_device *sdev, id_info_t *info)$/;"	f	file:
driver_version	ssd_type.h	/^    ssd_u8   driver_version;   $/;"	m	struct:ssd_info
ee	ssd_drv.h	/^    struct erase_entry ee;$/;"	m	struct:erase_entry_map
erase_buffer	ssd_type.h	/^	ssd_u8 *erase_buffer;$/;"	m	struct:ssd_mark_erase_count_param
erase_entry	ssd_drv.h	/^struct erase_entry$/;"	s
erase_entry_map	ssd_drv.h	/^struct erase_entry_map$/;"	s
erase_one_reserve_block	ssd_drv.c	/^static int erase_one_reserve_block(struct ssd_device *sdev, ssd_u16 block_pos)$/;"	f	file:
erase_times	ssd_drv.h	/^    ssd_u16  erase_times :13;$/;"	m	struct:erase_entry
error_ram	ssd_drv.h	/^	volatile ssd_ret error_ram;$/;"	m	struct:channel_op_control
errors	ssd_drv.h	/^    ssd_ret errors;              $/;"	m	struct:channel_op_control
fab	ssd_drv.h	/^    struct  free_area_bitmap fab[2];$/;"	m	struct:free_area_list
find_new_meta_block	ssd_drv.c	/^static inline ssd_s32 find_new_meta_block(struct ssd_device *sdev, ssd_u16 cur_pos)$/;"	f	file:
find_new_meta_pos	ssd_drv.c	/^static inline int find_new_meta_pos(struct ssd_device *sdev, int last_success)$/;"	f	file:
find_new_table_pos	ssd_drv.c	/^static inline ssd_s32 find_new_table_pos(struct ssd_device *sdev, ssd_u16 cur_pos)$/;"	f	file:
first	ssd_drv.h	/^    struct ssd_hash_node *first;$/;"	m	struct:ssd_hash_head
flash_cur_addrtable	ssd_type.h	/^    int flash_cur_addrtable[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_info
flash_cur_erasetable	ssd_type.h	/^    int flash_cur_erasetable[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_info
flush_id_info	ssd_drv.h	/^struct flush_id_info$/;"	s
flush_metadata	ssd_drv.c	/^static int flush_metadata(struct ssd_device *sdev)$/;"	f	file:
flush_sema	ssd_drv.c	/^struct semaphore flush_sema;$/;"	v
flush_tabledata	ssd_drv.c	/^static int flush_tabledata(struct ssd_device *sdev, char *buffer, ssd_u32 id_num, int flush_type)$/;"	f	file:
free_area_bitmap	ssd_drv.h	/^struct free_area_bitmap {$/;"	s
free_area_list	ssd_drv.h	/^struct free_area_list {$/;"	s
free_blocks	ssd_drv.c	/^static int free_blocks[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
free_blocks	ssd_drv.h	/^    ssd_s16 free_blocks[SSD_MAX_CHANNEL]; \/*all free blocks*\/$/;"	m	struct:ssd_device
free_blocks_buf	ssd_drv.c	/^static int free_blocks_buf[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
g_opened_flag	ssd_drv.c	/^int g_opened_flag = SSD_CLOSED;$/;"	v
g_ssd_log_fp	ssd_drv.c	/^static struct file *g_ssd_log_fp = NULL;$/;"	v	file:
g_ssd_log_level	ssd_drv.c	/^static int g_ssd_log_level = SSD_LOG_WARNING;\/\/5;\/\/SSD_LOG_INFO;$/;"	v	file:
gdisk	ssd_drv.h	/^    struct gendisk *gdisk[SSD_MAX_CHANNEL];           $/;"	m	struct:ssd_device
get_id_info	ssd_drv.c	/^static int get_id_info(struct ssd_device *sdev, struct ssd_blockid *id, id_info_t *info)$/;"	f	file:
hash_lock	ssd_drv.h	/^    spinlock_t hash_lock;$/;"	m	struct:ssd_hash_head
hash_node_head_t	ssd_drv.h	/^}__attribute__((packed)) hash_node_head_t;$/;"	v
hash_node_slab	ssd_drv.h	/^    struct kmem_cache *hash_node_slab;$/;"	m	struct:ssd_device
head	ssd_drv.h	/^    struct ssd_hash_head head[SSD_HASH_SIZE];$/;"	m	struct:channel_hash_list
id	ssd_drv.h	/^    struct ssd_blockid id;$/;"	m	struct:flush_id_info
id	ssd_drv.h	/^    struct ssd_blockid id;$/;"	m	struct:ssd_hash_node
id	ssd_type.h	/^        struct ssd_blockid id;       $/;"	m	union:ssd_mark_bad_param::<anonymous>
id	ssd_type.h	/^    struct ssd_blockid id;$/;"	m	struct:ssd_read_param
id	ssd_type.h	/^    struct ssd_blockid id;$/;"	m	struct:ssd_write_param
id	ssd_type.h	/^    struct ssd_blockid id;$/;"	m	struct:ssd_write_retry_param
id2channel	ssd_drv.c	/^static inline int id2channel(struct ssd_blockid *id)$/;"	f	file:
id_hash	ssd_drv.c	/^static inline int id_hash(struct ssd_blockid *id)$/;"	f	file:
id_info	ssd_drv.h	/^typedef struct id_info {$/;"	s
id_info_t	ssd_drv.h	/^} id_info_t;$/;"	t
id_num	ssd_drv.h	/^    ssd_u32 id_num;$/;"	m	struct:ssd_metadata
ioctl_channel_op_user	ssd_type.h	/^typedef struct ioctl_channel_op_user {$/;"	s
ioctl_channel_op_user_t	ssd_type.h	/^} ioctl_channel_op_user_t;  $/;"	t
kbuf_flush	ssd_drv.h	/^    ssd_u8 *kbuf_flush;$/;"	m	struct:ssd_device
kbuftable_cpu	ssd_drv.h	/^    ssd_u8 *kbuftable_cpu[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
kbuftable_dma	ssd_drv.h	/^    dma_addr_t kbuftable_dma[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_device
last_block_used_bytes	ssd_drv.h	/^    ssd_u32 last_block_used_bytes;$/;"	m	struct:ssd_metadata
len	ssd_drv.h	/^    ssd_u32 len      : 1;   \/* 0=2M, 1=10M      *\/$/;"	m	struct:flush_id_info
len	ssd_drv.h	/^    ssd_u32 len      : 1;$/;"	m	struct:id_info
len	ssd_drv.h	/^    ssd_u32 len      : 1;$/;"	m	struct:ssd_hash_node
len	ssd_type.h	/^    ssd_u32  len; $/;"	m	struct:ssd_read_param
len	ssd_type.h	/^    ssd_u32  len; $/;"	m	struct:ssd_write_param
len	ssd_type.h	/^    ssd_u32  len; $/;"	m	struct:ssd_write_retry_param
len	ssd_type.h	/^    ssd_u32 len;      $/;"	m	struct:ioctl_channel_op_user
log_level_string	ssd_drv.c	/^static char *log_level_string[] =$/;"	v	file:
m	Makefile	/^obj-m:=ssd_drv.o$/;"	m
m_nHigh	ssd_type.h	/^    ssd_u64 m_nHigh;$/;"	m	struct:ssd_blockid
m_nLow	ssd_type.h	/^    ssd_u64 m_nLow;  $/;"	m	struct:ssd_blockid
major	ssd_drv.h	/^    int major;                      $/;"	m	struct:ssd_device
meta	ssd_drv.h	/^    struct ssd_metadata meta;$/;"	m	struct:ssd_device
meta_pos	ssd_drv.h	/^    struct meta_position meta_pos;$/;"	m	struct:ssd_device
meta_position	ssd_drv.h	/^struct meta_position$/;"	s
metadata_check_val	ssd_drv.c	/^static inline int metadata_check_val(struct ssd_metadata *metadata)$/;"	f	file:
metadata_crc32	ssd_drv.h	/^    ssd_u32 metadata_crc32;$/;"	m	struct:ssd_metadata
metadata_magic	ssd_drv.h	/^    ssd_u16 metadata_magic;$/;"	m	struct:ssd_metadata
name	ssd_drv.h	/^    char name[MAX_DEVNAME];$/;"	m	struct:ssd_device
next	ssd_drv.h	/^    struct ssd_hash_node *next;$/;"	m	struct:ssd_hash_node
offset	ssd_type.h	/^    ssd_u32  offset;$/;"	m	struct:ssd_read_param
oob_size	ssd_type.h	/^    ssd_u32  oob_size;$/;"	m	struct:ssd_info
op_counts	ssd_drv.h	/^    ssd_u64 op_counts;         $/;"	m	struct:channel_op_control
owner	ssd_drv.h	/^    struct module *owner;$/;"	m	struct:ssd_device
pad	ssd_type.h	/^            ssd_u32 pad[3];$/;"	m	struct:ssd_mark_bad_param::<anonymous>::<anonymous>
page	ssd_drv.h	/^    ssd_u8 page;            \/* page = 0 ... 255  *\/$/;"	m	struct:meta_position
page	ssd_type.h	/^            ssd_u8 page;$/;"	m	struct:ssd_meta_version::<anonymous>::<anonymous>
page_nums	ssd_type.h	/^    ssd_u32  page_nums;  \/* the number of pages per channel *\/$/;"	m	struct:ssd_info
pages_per_block	ssd_type.h	/^    ssd_u32  pages_per_block;   $/;"	m	struct:ssd_info
param_block	ssd_type.h	/^        } param_block;$/;"	m	union:ssd_mark_bad_param::<anonymous>
pb_addr	ssd_drv.h	/^    ssd_u16  pb_addr  :13;$/;"	m	struct:addr_entry
pdev	ssd_drv.h	/^    struct pci_dev *pdev;$/;"	m	struct:ssd_device
plane_cur	ssd_drv.h	/^    int plane_cur[SSD_MAX_PLANES];$/;"	m	struct:channel_op_control
planes_per_ch	ssd_type.h	/^    ssd_u8   planes_per_ch;    $/;"	m	struct:ssd_info
proc_speed_read	ssd_drv.c	/^static int proc_speed_read(char *page, char **start, off_t off, int count, int *eof, void *data)$/;"	f	file:
proc_ssd_dir	ssd_drv.c	/^static struct proc_dir_entry *proc_ssd_dir;$/;"	v	file:
proc_ssd_speed_entry	ssd_drv.c	/^static struct proc_dir_entry *proc_ssd_speed_entry;$/;"	v	file:
queue	ssd_drv.h	/^    struct request_queue *queue;$/;"	m	struct:ssd_device
queue_lock	ssd_drv.h	/^    spinlock_t queue_lock;  $/;"	m	struct:ssd_device
ram_size	ssd_type.h	/^    ssd_u32  ram_size;       $/;"	m	struct:ssd_info
ram_table_read	ssd_drv.c	/^static int ram_table_read(struct ssd_device *sdev, struct ssd_table_param *param)$/;"	f	file:
read_count	ssd_drv.c	/^static unsigned int read_count[SSD_MAX_CHANNEL] ={0};$/;"	v	file:
read_count_buf	ssd_drv.c	/^static unsigned int read_count_buf[SSD_MAX_CHANNEL] ={0};$/;"	v	file:
read_one_reserve_block	ssd_drv.c	/^static inline int read_one_reserve_block(struct ssd_device *sdev, ssd_u16 block_pos)$/;"	f	file:
read_one_reserve_page	ssd_drv.c	/^static int read_one_reserve_page(struct ssd_device *sdev, ssd_u16 block_pos, ssd_u8 page)$/;"	f	file:
redzone0	ssd_drv.h	/^	ssd_u32 redzone0;$/;"	m	struct:channel_op_control
redzone1	ssd_drv.h	/^	ssd_u32 redzone1;$/;"	m	struct:channel_op_control
redzone2	ssd_drv.h	/^	ssd_u32 redzone2;$/;"	m	struct:channel_op_control
redzone3	ssd_drv.h	/^	ssd_u32 redzone3;$/;"	m	struct:channel_op_control
redzone4	ssd_drv.h	/^	ssd_u32 redzone4;$/;"	m	struct:channel_op_control
reg_read_unittest	ssd_drv.h	/^int reg_read_unittest = TEST_OFF;$/;"	v
reg_read_value0	ssd_drv.h	/^uint64_t reg_read_value0 = 0;$/;"	v
reg_read_value1	ssd_drv.h	/^uint64_t reg_read_value1 = 0;$/;"	v
reg_read_value2	ssd_drv.h	/^uint64_t reg_read_value2 = 0;$/;"	v
reg_write_param	ssd_type.h	/^typedef struct reg_write_param {$/;"	s
reg_write_praram_t	ssd_type.h	/^} reg_write_praram_t;$/;"	t
reserved	ssd_drv.h	/^    ssd_u16  reserved    : 1;$/;"	m	struct:erase_entry
reserved	ssd_drv.h	/^    ssd_u16  reserved : 3;$/;"	m	struct:addr_entry
ret_value	ssd_drv.h	/^    ssd_u64 *ret_value;$/;"	m	struct:ssd_regrd_param
retry_write_tabledata_block	ssd_drv.c	/^static ssd_s32 retry_write_tabledata_block(struct ssd_device *sdev, ssd_u16 block_num, ssd_u16 last_pos, char *buffer)$/;"	f	file:
sdev	ssd_drv.h	/^    struct ssd_device *sdev;  $/;"	m	struct:channel_op_control
search_block_metadata	ssd_drv.c	/^static int search_block_metadata(struct ssd_device *sdev)$/;"	f	file:
search_page_metadata	ssd_drv.c	/^static int search_page_metadata(struct ssd_device *sdev)$/;"	f	file:
sema	ssd_drv.h	/^    struct semaphore sema;    $/;"	m	struct:channel_op_control
set_id_info	ssd_drv.c	/^static int set_id_info(struct ssd_device *sdev, struct ssd_blockid *id, id_info_t *info)$/;"	f	file:
set_table_pos_in_meta	ssd_drv.c	/^static inline void set_table_pos_in_meta(struct ssd_device *sdev, ssd_u16 block_num, ssd_u16 cur_pos)$/;"	f	file:
sinfo	ssd_drv.h	/^    struct ssd_info sinfo;         \/* the information of ssd *\/  $/;"	m	struct:ssd_device
ssd_add_device	ssd_drv.c	/^static int ssd_add_device(struct ssd_device *sdev)$/;"	f	file:
ssd_add_timer	ssd_drv.c	/^static void ssd_add_timer(channel_op_control_t *ch_ctl, unsigned long timeout, $/;"	f	file:
ssd_addr_table_init	ssd_drv.c	/^static int ssd_addr_table_init(struct ssd_device *sdev, ssd_u8 channel)$/;"	f	file:
ssd_alloc_logic_block	ssd_drv.c	/^static int ssd_alloc_logic_block(struct ssd_device *sdev, ssd_u8 channel, ssd_u16 type)$/;"	f	file:
ssd_block_ioctl	ssd_drv.c	/^static int ssd_block_ioctl(struct block_device *bdev, fmode_t mode, unsigned int cmd, unsigned long arg)$/;"	f	file:
ssd_block_open	ssd_drv.c	/^static int ssd_block_open(struct block_device *bdev, fmode_t mode)$/;"	f	file:
ssd_block_release	ssd_drv.c	/^static int ssd_block_release(struct gendisk *gdisk, fmode_t mode)$/;"	f	file:
ssd_block_request	ssd_drv.c	/^static void ssd_block_request(struct request_queue *q)$/;"	f	file:
ssd_blockid	ssd_type.h	/^struct ssd_blockid$/;"	s
ssd_create_slab	ssd_drv.c	/^static int ssd_create_slab(struct ssd_device *sdev)$/;"	f	file:
ssd_del_device	ssd_drv.c	/^static void ssd_del_device(struct ssd_device * sdev)$/;"	f	file:
ssd_delete_timer	ssd_drv.c	/^static ssd_ret ssd_delete_timer(channel_op_control_t *ch_ctl)$/;"	f	file:
ssd_destory_slab	ssd_drv.c	/^static void ssd_destory_slab(struct ssd_device *sdev)$/;"	f	file:
ssd_dev	ssd_drv.h	/^static struct ssd_device *ssd_dev = NULL;$/;"	v
ssd_device	ssd_drv.h	/^typedef struct ssd_device {$/;"	s
ssd_device_t	ssd_drv.h	/^}ssd_device_t;$/;"	t
ssd_disable_msi	ssd_drv.c	/^static void ssd_disable_msi(struct ssd_device *sdev)$/;"	f	file:
ssd_driver	ssd_drv.c	/^static struct pci_driver ssd_driver = {$/;"	v	file:
ssd_enable_msi	ssd_drv.c	/^static int ssd_enable_msi(struct ssd_device *sdev)$/;"	f	file:
ssd_erase_phyblock	ssd_drv.c	/^static inline int ssd_erase_phyblock(struct ssd_device *sdev, ssd_u8 channel, ssd_u16 block)$/;"	f	file:
ssd_erase_table_init	ssd_drv.c	/^static int ssd_erase_table_init(struct ssd_device *sdev, ssd_u8 channel)$/;"	f	file:
ssd_erase_unused_block	ssd_drv.c	/^static int ssd_erase_unused_block(struct ssd_device *sdev, ssd_u8 channel, struct erase_entry *buf)$/;"	f	file:
ssd_hash_head	ssd_drv.h	/^struct ssd_hash_head$/;"	s
ssd_hash_node	ssd_drv.h	/^struct ssd_hash_node$/;"	s
ssd_hash_node_t	ssd_drv.h	/^} ssd_hash_node_t;$/;"	v
ssd_id_delete	ssd_drv.c	/^static int ssd_id_delete(struct ssd_device *sdev, struct ssd_blockid *id)$/;"	f	file:
ssd_id_read	ssd_drv.c	/^static int ssd_id_read(struct ssd_device *sdev, struct ssd_read_param *rparam)$/;"	f	file:
ssd_id_val	ssd_drv.c	/^static int ssd_id_val(struct flush_id_info *id, struct addr_entry *addr, struct erase_entry *erase)$/;"	f	file:
ssd_id_write	ssd_drv.c	/^static int ssd_id_write(struct ssd_device *sdev, struct ssd_write_param *wparam)$/;"	f	file:
ssd_info	ssd_type.h	/^typedef struct ssd_info {$/;"	s
ssd_info_t	ssd_type.h	/^}ssd_info_t; $/;"	t
ssd_init_channel_bitmap	ssd_drv.c	/^static ssd_u16 ssd_init_channel_bitmap(struct free_area_list *area, ssd_u16 start, ssd_u16 pre_alloc)$/;"	f	file:
ssd_init_hash	ssd_drv.c	/^static void ssd_init_hash(struct ssd_device *sdev)$/;"	f	file:
ssd_init_meta	ssd_drv.c	/^static inline void ssd_init_meta(struct ssd_device *sdev)$/;"	f	file:
ssd_init_module	ssd_drv.c	/^module_init(ssd_init_module);$/;"	v
ssd_init_module	ssd_drv.c	/^static int __init ssd_init_module(void)$/;"	f	file:
ssd_interrupt	ssd_drv.c	/^static irqreturn_t ssd_interrupt(int irq, void *sdev_instance)$/;"	f	file:
ssd_log	ssd_drv.c	/^static void ssd_log(int log_level, const char *fmt, ...)$/;"	f	file:
ssd_log_close	ssd_drv.c	/^static void ssd_log_close()$/;"	f	file:
ssd_log_open	ssd_drv.c	/^static struct file * ssd_log_open(const char *filename, int flag, int mode)$/;"	f	file:
ssd_log_write	ssd_drv.c	/^static int ssd_log_write(struct file *fp, char *buffer, int len)$/;"	f	file:
ssd_major	ssd_drv.h	/^static int ssd_major = 0;$/;"	v
ssd_mark_bad_block	ssd_drv.c	/^static inline int ssd_mark_bad_block(struct ssd_device *sdev, struct ssd_mark_bad_param *mbparam)$/;"	f	file:
ssd_mark_bad_param	ssd_type.h	/^struct ssd_mark_bad_param$/;"	s
ssd_mark_erase_count	ssd_drv.c	/^static inline int ssd_mark_erase_count(struct ssd_device *sdev, struct ssd_mark_erase_count_param *mecparam)$/;"	f	file:
ssd_mark_erase_count_param	ssd_type.h	/^struct ssd_mark_erase_count_param$/;"	s
ssd_mark_erase_table	ssd_drv.c	/^static inline void ssd_mark_erase_table(struct ssd_hash_node *node, struct addr_entry *addr, struct erase_entry *erase)$/;"	f	file:
ssd_meta_version	ssd_type.h	/^struct ssd_meta_version$/;"	s
ssd_metadata	ssd_drv.h	/^struct ssd_metadata$/;"	s
ssd_ops	ssd_drv.c	/^struct block_device_operations ssd_ops = {$/;"	v
ssd_pci_tbl	ssd_drv.c	/^static struct pci_device_id ssd_pci_tbl[] = {$/;"	v	file:
ssd_probe	ssd_drv.c	/^static int  __devinit ssd_probe(struct pci_dev *pdev, const struct pci_device_id *ent)$/;"	f	file:
ssd_read_flush	ssd_drv.c	/^static int ssd_read_flush(struct ssd_device *sdev, struct ssd_meta_version *version)$/;"	f	file:
ssd_read_flush_tabledata	ssd_drv.c	/^static int ssd_read_flush_tabledata(struct ssd_device *sdev, char *buffer)$/;"	f	file:
ssd_read_idtable	ssd_drv.c	/^static int ssd_read_idtable(struct ssd_device *sdev, struct ssd_readid_param *ridparam)$/;"	f	file:
ssd_read_metadata	ssd_drv.c	/^static inline int ssd_read_metadata(struct ssd_device *sdev, ssd_u16 meta_block, ssd_u8 meta_page)$/;"	f	file:
ssd_read_param	ssd_type.h	/^struct ssd_read_param$/;"	s
ssd_read_tabledata	ssd_drv.c	/^static inline int ssd_read_tabledata(struct ssd_device *sdev, ssd_u16 tabledata_block, ssd_u8 page)$/;"	f	file:
ssd_readid_param	ssd_type.h	/^struct ssd_readid_param$/;"	s
ssd_rebuild_erasetable	ssd_drv.c	/^static int ssd_rebuild_erasetable(struct ssd_device *sdev, char *buffer)$/;"	f	file:
ssd_rebuild_hash	ssd_drv.c	/^static int ssd_rebuild_hash(struct ssd_device *sdev, char *buffer)$/;"	f	file:
ssd_reg64_read	ssd_drv.c	/^static inline ssd_u64 ssd_reg64_read(void *addr)$/;"	f	file:
ssd_reg64_write	ssd_drv.c	/^static inline void ssd_reg64_write(void *addr, ssd_u64 val)$/;"	f	file:
ssd_regrd_param	ssd_drv.h	/^struct ssd_regrd_param$/;"	s
ssd_regwr_param	ssd_drv.h	/^struct ssd_regwr_param$/;"	s
ssd_reload_bitmap	ssd_drv.c	/^static int ssd_reload_bitmap(struct ssd_device *sdev)$/;"	f	file:
ssd_remap_block	ssd_drv.c	/^static int ssd_remap_block(struct ssd_device *sdev, ssd_u8 channel)$/;"	f	file:
ssd_remove	ssd_drv.c	/^static void __devexit ssd_remove (struct pci_dev *pdev)$/;"	f	file:
ssd_remove_module	ssd_drv.c	/^module_exit(ssd_remove_module);$/;"	v
ssd_remove_module	ssd_drv.c	/^static void __exit ssd_remove_module(void)$/;"	f	file:
ssd_ret	ssd_type.h	/^typedef int ssd_ret;$/;"	t
ssd_s16	ssd_type.h	/^typedef short ssd_s16;$/;"	t
ssd_s32	ssd_type.h	/^typedef int ssd_s32;$/;"	t
ssd_s64	ssd_type.h	/^typedef long long ssd_s64;$/;"	t
ssd_s64	ssd_type.h	/^typedef long ssd_s64;$/;"	t
ssd_s8	ssd_type.h	/^typedef char ssd_s8;    $/;"	t
ssd_search_metadata	ssd_drv.c	/^static int ssd_search_metadata(struct ssd_device *sdev)$/;"	f	file:
ssd_set_conf	ssd_drv.c	/^static int ssd_set_conf(struct ssd_device *sdev)$/;"	f	file:
ssd_status	ssd_type.h	/^typedef int ssd_status;    $/;"	t
ssd_sys_close	ssd_drv.c	/^static int ssd_sys_close(struct ssd_device *sdev)$/;"	f	file:
ssd_sys_flush	ssd_drv.c	/^static int ssd_sys_flush(struct ssd_device *sdev, int flush_type)$/;"	f	file:
ssd_sys_init	ssd_drv.c	/^static int ssd_sys_init(struct ssd_device *sdev)$/;"	f	file:
ssd_sys_init_newcard	ssd_drv.c	/^static int ssd_sys_init_newcard(struct ssd_device *sdev)$/;"	f	file:
ssd_sys_init_newcard_in_channel	ssd_drv.c	/^static int ssd_sys_init_newcard_in_channel(struct ssd_device *sdev, ssd_u8 channel)$/;"	f	file:
ssd_sys_open	ssd_drv.c	/^static int ssd_sys_open(struct ssd_device *sdev)$/;"	f	file:
ssd_sys_open_newcard	ssd_drv.c	/^static int ssd_sys_open_newcard(struct ssd_device *sdev)$/;"	f	file:
ssd_table_param	ssd_type.h	/^struct ssd_table_param$/;"	s
ssd_table_read	ssd_drv.c	/^static int ssd_table_read(struct ssd_device *sdev, struct ssd_table_param *param)$/;"	f	file:
ssd_timeout	ssd_drv.c	/^static void ssd_timeout(channel_op_control_t *ch_ctl)$/;"	f	file:
ssd_u16	ssd_type.h	/^typedef unsigned short ssd_u16;$/;"	t
ssd_u32	ssd_type.h	/^typedef unsigned int ssd_u32;$/;"	t
ssd_u64	ssd_type.h	/^typedef unsigned long long ssd_u64;$/;"	t
ssd_u64	ssd_type.h	/^typedef unsigned long ssd_u64;$/;"	t
ssd_u8	ssd_type.h	/^typedef unsigned char ssd_u8;    $/;"	t
ssd_unset_conf	ssd_drv.c	/^static void ssd_unset_conf(struct ssd_device *sdev)$/;"	f	file:
ssd_updata_tables	ssd_drv.c	/^static int ssd_updata_tables(struct ssd_device *sdev, char *buffer, int normal_uninstall)$/;"	f	file:
ssd_write_param	ssd_type.h	/^struct ssd_write_param$/;"	s
ssd_write_retry_param	ssd_type.h	/^struct ssd_write_retry_param$/;"	s
ssd_write_tables_to_ram	ssd_drv.c	/^static inline int ssd_write_tables_to_ram(struct ssd_device *sdev, ssd_u8 channel, ssd_u8 flag)$/;"	f	file:
start	ssd_type.h	/^    ssd_u32 start;        \/* the start addr *\/ $/;"	m	struct:ioctl_channel_op_user
status	ssd_drv.h	/^    ssd_status status;            $/;"	m	struct:channel_op_control
status	ssd_drv.h	/^    ssd_u8 status; $/;"	m	struct:ssd_device
status	ssd_type.h	/^    ssd_status status[SSD_MAX_CHANNEL];$/;"	m	struct:ssd_info
table_block_pos	ssd_drv.h	/^    ssd_u16 table_block_pos[SSD_MAX_FLUSH_BLOCK * TABLE_DUPLICATE]; \/*2 duplicate*\/ $/;"	m	struct:ssd_metadata
timeout	ssd_drv.h	/^    struct timer_list  timeout;$/;"	m	struct:channel_op_control
timestamp	ssd_drv.h	/^    time_t timestamp;$/;"	m	struct:ssd_metadata
type	ssd_drv.h	/^    ssd_u16 type;$/;"	m	struct:free_area_bitmap
type	ssd_type.h	/^    ssd_u8 type; \/\/0 param_id, 1 param_block$/;"	m	struct:ssd_mark_bad_param
type	ssd_type.h	/^    ssd_u8 type;$/;"	m	struct:ssd_table_param
u	ssd_type.h	/^    } u;$/;"	m	struct:ssd_mark_bad_param
update_meta	ssd_drv.c	/^static inline void update_meta(struct ssd_device *sdev, ssd_u16 block_num, ssd_u16 last_block_used_bytes, int flush_type, ssd_u32 id_num)$/;"	f	file:
use_flag	ssd_drv.h	/^    ssd_u16  use_flag    : 1;$/;"	m	struct:erase_entry
usr_buf	ssd_type.h	/^    ssd_u8* usr_buf;    $/;"	m	struct:ssd_table_param
usr_buf	ssd_type.h	/^    ssd_u8* usr_buf;$/;"	m	struct:ssd_readid_param
value	ssd_drv.h	/^    ssd_u64 value;$/;"	m	struct:ssd_regwr_param
value	ssd_type.h	/^    uint64_t value;$/;"	m	struct:reg_write_param
vbp	ssd_type.h	/^    } vbp;$/;"	m	struct:ssd_meta_version
version	ssd_drv.h	/^    ssd_u64 version;$/;"	m	struct:ssd_metadata
version	ssd_type.h	/^        ssd_u64 version;$/;"	m	union:ssd_meta_version::<anonymous>
version_flag	ssd_type.h	/^    ssd_u8 version_flag;$/;"	m	struct:ssd_meta_version
waiting	ssd_drv.h	/^    struct completion *waiting;  $/;"	m	struct:channel_op_control
write_count	ssd_drv.c	/^static unsigned int write_count[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
write_count_buf	ssd_drv.c	/^static unsigned int write_count_buf[SSD_MAX_CHANNEL] = {0};$/;"	v	file:
write_meta_page	ssd_drv.c	/^static int write_meta_page(struct ssd_device *sdev, int plane_num)$/;"	f	file:
write_metadata_page_duplicate	ssd_drv.c	/^static int write_metadata_page_duplicate(struct ssd_device *sdev)$/;"	f	file:
write_one_reserve_block	ssd_drv.c	/^static inline int write_one_reserve_block(struct ssd_device *sdev, ssd_u16 block_pos, char* buffer)$/;"	f	file:
write_one_reserve_page	ssd_drv.c	/^static int write_one_reserve_page(struct ssd_device *sdev, ssd_u16 block_pos, ssd_u8 page)$/;"	f	file:
write_tabledata_block_duplicate	ssd_drv.c	/^static int write_tabledata_block_duplicate(struct ssd_device *sdev, ssd_u16 cur_pos, char *buffer)$/;"	f	file:
